package com.yhh.whbx.admin.model;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.ehcache.CacheKit;
import com.yhh.whbx.Consts;
import com.yhh.whbx.admin.model.base.BaseUser;
import com.yhh.whbx.kits.DateKit;
import com.yhh.whbx.kits._StrKit;

import java.math.BigInteger;
import java.util.Date;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User().dao();
	public String getReceiveMsgTxt(){
		if(getReceiveMsg()==null)return "";
		return getYOrNTxt(getReceiveMsg());
	}

	public String getStatusTxt(){
		return super.getStatusTxt(getStatus());
	}

	public String getCatTxt(){
		return DateKit.dateToStr(getCAt(),DateKit.yyyy_MM_dd);
	}

	public String getLoggedTxt(){
		if(getLogged()!=null){
			return DateKit.dateToStr(getLogged(),DateKit.STR_DATEFORMATE);
		}else{
			return "";
		}
	}

	public String getEmailStatusTxt(){
		if(getEmailStatus()==null)return "";
		return getYOrNTxt(getEmailStatus());
	}

	public String getPhoneStatusTxt(){
		if(getPhoneStatus()==null)return "";
		return getYOrNTxt(getPhoneStatus());
	}

	public String getIdCardtypeTxt(){
		Integer ict=getIdcardtype();
		if(ict==null)return "";
		switch (ict){
			case 1:
				return "身份证";
			case 2:
				return "军官证";
			case 3:
				return "护照";
			default:
				return "";
		}
	}


	public User findByNickname(String nickname){
		String sql="select * from s_user where nickname=?";
		return dao.findFirst(sql,nickname);
	}

	public User findByOpenId(String openId){
		String sql="select * from s_user where third_id=?";
		return dao.findFirst(sql,openId);
	}

	public User findByUnionId(String unionId){
		String sql="select * from s_user where unionid=?";
		return dao.findFirst(sql,unionId);
	}


	public User addThirdUserInfo(String nickname,String avatar,String accessToken,String openid,String unionid,String loginType){
		User user=null;
		if(!StrKit.isBlank(unionid)){
			user=User.dao.findByUnionId(unionid);
			if(user!=null)
				return user;
		}
//		Date accessTokenExpiresDate=new Date(System.currentTimeMillis()+accessToken_expires_in-5);
		user=User.dao.findByOpenId(openid);
		boolean bl = user==null? true:false;
		String rs=null;
		while (bl) {
			nickname = (user == null) ? nickname : nickname+"_"+ _StrKit.getRandomString(10);
			user = User.dao.findByNickname(nickname);
			if (user == null) bl = false;
		}
		user = User.dao.findByOpenId(openid);
		if (user == null) {
			user = new User();
			user.setCAt(new Date());
			user.setThirdAccessToken(accessToken);
			user.setThirdId(openid);
			user.setNickname(nickname);
			user.setAvatar(avatar);
			user.setActivated(new Date());
			user.setStatus(Consts.STATUS.enable.getVal());
			user.setLogged(new Date());
			user.setIsAdmin(Consts.YORN_STR.no.getVal());
			user.setEmailStatus(Consts.YORN.no.isVal());
			user.setPhoneStatus(Consts.YORN.no.isVal());
			user.setChannel(loginType);
			user.setReceiveMsg(Consts.YORN.no.isVal());
			user.setUnionid(unionid);
//			user.setAccessTokenOverdue(accessTokenExpiresDate);
			user.save();
		} else {
			user.setMAt(new Date());
			user.setAvatar(avatar);
			//user.setNickname(nickname);
			user.setLogged(new Date());
			user.setThirdAccessToken(accessToken);
			user.setUnionid(unionid);
			user.update();
			CacheKit.remove(Consts.CACHE_NAMES.user.name(), user.getId());
			CacheKit.remove(Consts.CACHE_NAMES.userReses.name(), user.getId());
			CacheKit.remove(Consts.CACHE_NAMES.userRoles.name(), user.getId());
			//redirect(site);
		}

		Role role=Role.dao.findFirst("select * from s_role where name=?","user");

		String uId=(user.get("id") instanceof Long)?user.getLong("id").toString():user.getBigInteger("id").toString();
		UserRole userRole=UserRole.dao.findFirst("select * from s_user_role where uid=? and rid=?",new BigInteger(uId),role.getId());
		if(userRole==null) {
			userRole = new UserRole();
			userRole.setUid(new Long(uId));
			userRole.setRid(role.getId().intValue());
			userRole.save();
		}
		return user;
	}

}
